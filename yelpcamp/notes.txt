Yelpcamp 

Section 39 - Campground Cruds - Yelpcamp
    -   Create a basic express app
    -   Set Up ejs and views directory
    -   Create model
    -   Create a seed database
    -   Setup basic crud functionalities to see if everything is working

Section 40 - Middleware (Express)
    -   Express middleware are functions that run during requests/response lifecycle
    -   Middleware are just function that run between getting the request and send the response.
    -   Each middleware has access to the request and response objects
    -   Middleware can send a HTTP request by sending back a response with methods like res.send()
    -   OR middleware can be chained together,one after the another by calling next().
    -   Morgan - a logging middleware
    -   next() is used to run the next middleware inline, considering whichever matches the route
    -   we have to know that we can send only one respone per request, so even if we try next() after a send then it won't do anything
    -   More on app.use()
        -   we can specify paths, to make sure that middleware runs only when we hit that route
        -   in middleware we usually send next but in route handlers we render something
        -   we can use app.use to perform a default 404 behaviour
    -   most common pattern is to put it with one of the app routers, get,post ... 

Section 41 - Adding basic styles - Yelpcamp
    -  ejs-mate 
        -   gives additional functionality to ejs
        -   it has a property called layout, which allows us to create boilerplates
        -   we have <%-body%> in boilerplate and for rest of the files we only keep the elements in body tag and 
            use <% layout(path to boilerplate)%>
Section 42 - Handling errors in express
    -   express has default errors which basically are sent as a response as an html with 500.. error code
        -   when error is written, following information is added
            -   res.statusCode is set from err.statusCode. If it's outside the range of 4xx or 5xx then it's set to 500.
            -   res.statusMessage is set according to the status code
            -   the body will be html of the status code if in production enviroment else it would be err.stack
            -   any headers specified in err.headers object
    -   we can throw new Error(...) and it will change the message of the default error
    -   custom error handlers   
        -   any middleware function can be defined as the error handling function, just pass in err,req,res,next
        -   it should be put at the bottom of the routes
        -   next(err) will send it to the next error handling middleware, which would be the default one if we have a single error middleware.
    -   custom error class
        -   we can set an error code for every error we face, but that's too much work so we create an error class.
        -   we can define a bunch of things, in the tut we did status and message.
        -   we can then throw an error by creating a new instance of the class and passing in the arguments
    -   async error
        -   for async error we can't just normally throw an exception. instead we have to pass the object instance into the next function.
        -   TO TEST THIS GOING TO express-and-mongoose
        -   to catch all the errors, which might occur from mongoose too. So to do that we use try-catch and then invoke the
            next function in the catch block.
        -   to reduce the code of writing try and catch again and again, we instead define a function that takes in our 
            async function and then returns a function with catch attached to it.
    -   Differentiating mongoose errors
        -   Every mongoose error has a name
            -   ValidationError, CastError etc
            -   we can single out these error, for ex.
                -   if(err==='ValidationError') e = handleValError(err)
                    next(e) 
            -   and then we can define handleValError anyway we want, just make sure to written an err for further middleware to 

Section-43 Errors and Validation (Yelpcamp)
    -   Client-side form Validation
        -   We use the bootstrap validators
    -   Setup a basic error and then an error class and wrapAsync function
    -   Make an error template
    -   validate the campground data, new or edit. Though we have added client side validations using bootstrap but still someone can use postman to work it's way around
        Now we can add individually to each and every key or or we can use joi package
    -   we define a schema with joi, now this is not a mongoose schema. We will validate it all using this schema, even before passing anything to mongoose

Section-44 Data relationships with mongo
    -   Focus on one to many relationships
        -   all depending on how much "many" is.
        -   One to few
            -   Embed the data directly into the document
            -   mongoose adds an id to the embedded schema's too. we can turn it off _id:{id:false}
        -   One to many
            -   One option is to store your data separately, but then store references to document ID's somewhere inside
                the parent
            -   to do this we need to tell the type is mongoose.Schema.Types.ObjecyId if we are using that and the ref key which should be the model name we are linking with
        -   Populate
            -   add .populate(field) after the query
        -   One to Bajillions
            -   With thousands or more documents, it's better to store reference to the parent on the child element

Section-45 Relationships between Express and Mongo
    -   we need to setup the mongoose middleware on the schema, before the compilation of it to the model
    -   in a model middleware this refers to the document whereas in the query middleware this refers to the query. 
    -   in query middleware we have to wait til the query is completed to get an access to the document

Section-46 Review model - Yelpcamp
    -   Define reviewSchema and link it with campgroundSchema. One to Many relationships
    -   Add the review form
    -   Create Reviews
    -   Validate Reviews
    -   show reviews
    -   delete individiual review
    -   delete reviews when campground is deleted

Section-47/48 Routers and Cookies and Sessions
    -   Helps us group similar routes and move into a separate file. For ex - 
        - /shelter
        - /shelter/new
        - /shelter/:id ...
    
    -   express.Router() gives us a router object 
    -   we define a bunch of routers in a separate js file and then in the primary js file we use app.use(`whatever we want to prefx the routes with`,routers)
    -   we can also define middleware separately which will apply to only those routes in the file

    -   Cookies
        -   Cookies are bits of information stored in the user's browser when browsing a particular website
        -   Once a cookie is set, the user's browser will send the cookie on every subsequest request to the site
        -   Cookies allow us to make HTTP stateful (we store some info, and when the user makes a request it sends that info to the server)
        -   It could be preferences like dark mode and what not
        -   Sending Cookies
            -   we set cookie in response for as many routes we want. But if we visit that route once, then the cookie will be stored even if we go to other routes
        -   Parsing Cookies
            -   we need to install cookie-parser package
            -   now we have cookies in the request as req.cookies
        -   Signed Cookies
            -   they are not for encrypting the data but a way of making sure that the cookie we sent and the data we recieved back from the user are same.
                If they are, then we can assure that no one tampered it in the way
            -   we won't find these in req.cookies, instead they will be in signedCookies
            -   if we change the cookie, then the respone would be just false.
    
    -   Sessions
        -   It's not very practical or secure to store a lot of data client-side using cookies. 
        -   Sessions are server side data store that we use to make HTTP stateful. Instead of storing data in cookies, we store the data in server side
            and then send browser a cookie that can be used to retrieve the data
        -   when we go to a site, some data is stored in the session data store with an id and it sends that id as a cookie to the browser
            then when we go to that url again, the browser sends us the cookie with the session id 
        -   we will have a session object property available on our request object
        -   resave - many session stores set an expiry time on a session if no changes are made and kills the session. We need resave in that to make sure that even if no changes are made, 
                     our session is still active. As for cases in which the session store doesn't have this, we dont need to put resave
        -   saveUninitialized - If during the lifetime of the request the session object isn't modified then, at the end of the request and when saveUninitialized is false, 
                                the (still empty, because unmodified) session object will not be stored in the session store.
        -   by default it's stored in memory store which should be changed eventually
    -   Flash
        -   It's basically to flash a message. And when we refresh the page, it goes away.
        -   All request objects get a flash function. We pass in the key and the message.
        -   better way to do this, we should make a middleware
        -   res.locals - an object that contains response local variables scoped to the request and therefore available to only those views rendered in that res/req cycle
    
Section 49 - Restructuring and Flash - Yelpcamp
    -   routing update
        -   routers have a different set of params. so we need to specify merge params
    -   to serve static assets we make a public folder and to make it usable we specify it in app.js
    -   session setup
    -   flash 

Section 50 - Authentication
    -   Authentication
        -   The process of verifying who a particular user is.
        -   We typically authenticate with a username and password combo but we can also use security questions or facial recog.
    -   Authorization
        -   The process of verifying what a specific user has access to
        -   Generally, we authorize after a user has been authenticated
    -   Passwords
        -   Rule #1 - Never store passwords as is
        -   we run all the passwords first through a hash function and then store it 
        -   Hash maps input data of arbitary size to a fixed length output values
        -   Cryptographic Hashing functions
            -   should be a one way function
            -   small change in input should yeild huge change in output  
            -   same output for same input
            -   unlikely to get a collision
            -   for password hashing it should be slow
        -   Salts
            -   A salt is a random value added to password before we hash it
            -   It helps insure unique hashes and mitigate common attacks
        -   Bcrypt - passsword hashing function we used
            -   genSalt(). Has a parameter named number of rounds, which basically is a way to increase difficulty. Higher the number, more difficult it is
                this delay takes effect when we use the salt in the hashing function and not when we define it
            -   hash(password,salt)
            -   compare(password,hashedPassword) 

Section 51 - Authentication Yelpcamp
    -   Passport
        -   this is going to add on a field for password and username onto our schema. And additional functions
                userSchema.plugin(passportLocalMongoose);
        -   now configure passport in app.js file
